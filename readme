TelecomX Churn Prediction Project (Parte 2)
Descripción
Este proyecto es la segunda parte del desafío del programa Alura ONE, continuando el análisis de evasión de clientes (churn) para TelecomX. Basado en el trabajo previo de ETL y EDA, ahora el objetivo es usar Machine Learning para predecir qué clientes tienen más probabilidad de cancelar sus servicios y dar recomendaciones estratégicas.
🎯 Objetivo del proyectoUsar los datos tratados para:

Preparar datos para modelado (codificación, normalización).
Entrenar y evaluar modelos predictivos.
Identificar variables importantes para el churn.
Proponer estrategias de retención.

📂 Estructura del repositorio

TelecomX_Data.json → Datos originales en formato JSON.
TelecomX_diccionario.md → Descripción de cada variable del dataset.
TelecomX_LATAM.ipynb → Notebook con el análisis anterior y la nueva parte de ML.
README.md → Este documento.
(Opcional) TelecomX_ML.ipynb → Nuevo notebook para el modelado (si lo separas).

🔄 Flujo de trabajo
Preparación de datos

Usar el DataFrame limpio del paso anterior.
Codificar variables categóricas (ej: Yes/No a 1/0).
Estandarizar columnas numéricas (tenure, Charges).

Modelado

Dividir datos en entrenamiento y prueba.
Entrenar modelos: Logistic Regression y Random Forest.
Evaluar con métricas como Accuracy, Precision, Recall, F1 y ROC-AUC.

Análisis de variables

Calcular la importancia de las features con Random Forest.
Visualizar correlaciones con gráficos.

Conclusión

Resumir factores de churn y dar recomendaciones.

📈 Principales insights (preliminares)

Clientes con baja tenencia y altos cargos mensuales tienden a churnear.
Contratos de mes a mes aumentan la evasión.
Modelos predicen churn con buen rendimiento (Accuracy ~80%).

🛠 Tecnologías usadas

Python 3
Pandas (manejo de datos)
Scikit-learn (modelos y métricas)
Matplotlib (gráficos)
Seaborn (visualizaciones, opcional)

▶️ Cómo ejecutar el notebook

Abre Google Colab o tu entorno Jupyter.
Sube el archivo TelecomX_LATAM.ipynb (o TelecomX_ML.ipynb si lo separaste).
Sube también TelecomX_Data.json y TelecomX_diccionario.md.
Instala las dependencias si no las tienes:pip install pandas scikit-learn matplotlib seaborn


Ejecuta las celdas en orden para:
Cargar datos.
Entrenar y evaluar modelos.
Ver gráficos y conclusiones.



👨‍💻 AutorDesarrollado por Jimmy Vasquez como parte del desafío de Machine Learning en Alura ONE. GitHub: jfvmgit / jimTelecomX2.
